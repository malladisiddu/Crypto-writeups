from Crypto.Util.number import *
from Crypto.PublicKey import *
import gmpy2
c = "44e66fa36292bcfc3cce5ca922459594b6f83e8e6e8d60a9091b05172b1c622a5bb8f83a8d735d9500be5a9b12d28f3ba4f2b77e44db17790e048d9c047d051dceaffd849edbfd2a8d49655270b1f9dc9101e5460e0b5dd499a2883d834be9273cc9be63897affc3121a16b4236b09f40df7a62aeeea8b1ce01bd5f8a14f77df".decode('hex')
ct = bytes_to_long(c)
n = 113688948285842899107975301022215849433130338840548967469541502266648698859427789882909935207845403124414725514641333266767452747358231793289531990179230714791473631866452291072856425388757401443749925740001136871466483114739269309310921145831373531460767011787628854371542639519059269733470587037962830964359
e = 65537
s=110370426497831451822733079366661860666728698339026653069387375346858803122482504061742694145615596997099499205833427010409309411871260175273898702828048810670546334410438335896013750536574988181103172134795428262705168693013020908366310747455165631530131553809081551583619903892751314809459201354290153163772
#According to the encrypt.py
#To solve this challenge we need to understand Fermat Little Theorem
#pow(a,p) = a (mod p) 
#s = pow(2, p - 0xdeadbeef, n)  ==> s = pow(2, p - 0xdeadbeef) (mod n)
#Let t = 0xdeadbeef
# s = k*n + pow(2, p - t)
# s = k*n + (pow(2,p) * pow(2,-t))
# s = k*p*q + (pow(2,p) * pow(2,-t))        {Since, n = p*q}
#Apply (pow(2,t) mod p) on both sides
# (pow(2,t) mod p)*s = 0 + (pow(2,p) mod p)  {Since, When k*p*q is divided by p then remainder is 0}
# We know that, pow(2,p) (mod p) = kp + 2
# pow(2,p)(mod p) - 2 = kp ==> pow(2,p,p) - 2 = kp
# pow(2,t)*s - 2 = kp
# So, p = GCD(kp,n)
kp = (pow(2,0xdeadbeef)*s)-2
p = GCD(kp,n)
print 'p: ',p
q = n/p
print 'q: ',q
phin = (p-1)*(q-1)
d = inverse(e,phin)
print 'd: ',d
m = long_to_bytes(pow(ct,d,n))
print m
#p:  11412725342483303605286705237173902699055250943969076552455463420940235168996046126462792870260024882797191029895626103973744690525089276895695942904185573
#q:  9961595050626639736898107773346295291762499330732145753912111663120315989347014548445802254499675627246981009056220217616373743239214644763790498542866683
#d:77322085111385561468174971275206784820527619407964800448904792415449783393522359559499893831260099691236058415309033793118782844927269568675623073962171745696061328884353470234932315042438601245596875745784653128003285625560014497134019340713357591950652819285742233017328804109649215763786629655827435572489
#crypton{f3rm4t_w0uld_b3_s0_proud!gr34t_j0b}
